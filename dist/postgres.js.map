{"version":3,"file":"postgres.js","names":["_postgresConnection","_interopRequireDefault","require","_pg","_pgFormat","_util","_esc","_database","e","__esModule","default","pg","types","setTypeParser","val","parseInt","minipg","Postgres","Database","constructor","options","client","driver","PostgresConnection","ident","value","esc","setNoticeProcessor","processor","Client","defaultNoticeProcessor","connect","db","shutdown","dialect","_each","sql","params","callback","log","close","cursor","query","hasRows","result","next","columns","values","index","ex","verbose","console","error","err","_execute","resultColumns","rows","push","beginTransaction","Error","execute","commit","rollback","transaction","block","Object","assign","rollbackError","using","connection","arrayFormatString","array","Number","isInteger","buildWhere","where","clause","key","keys","pgformat","Array","isArray","length","buildInsert","attributes","includeNames","names","placeholders","raw","buildUpdate","sets","insertStatement","table","pk","returning","returnPrimaryKey","format","join","insertStatements","arrayOfAttributes","arrayOfValues","insert","statement","all","id","toDatabase","column","type","toISOString","fromDatabase","Date","exports"],"sources":["../src/postgres.js"],"sourcesContent":["import PostgresConnection from './postgres-connection';\nimport pg from 'pg';\nimport pgformat from 'pg-format';\nimport { format } from 'util';\nimport esc from './esc';\nimport Database from './database';\n\n// Parse bigints as `Number` objects. If a caller *really* knows their\n// number cannot fit in a JS Number, it can be casted to `text` in\n// the query and parsed manually. Without this, dead simple COUNT(*)\n// queries are returned as text and it makes doing simple things hard.\npg.types.setTypeParser(20, (val) => {\n  return val == null ? null : parseInt(val, 10);\n});\n\nlet minipg = null;\n\nexport default class Postgres extends Database {\n  constructor(options) {\n    super(options);\n\n    this.client = options.client;\n  }\n\n  static set driver(driver) {\n    minipg = driver;\n    PostgresConnection.driver = driver;\n  }\n\n  ident(value) {\n    return esc(value, '\"');\n  }\n\n  static setNoticeProcessor(processor) {\n    minipg.Client.defaultNoticeProcessor = processor;\n  }\n\n  static async connect(db) {\n    return await PostgresConnection.connect(db);\n  }\n\n  static shutdown() {\n    PostgresConnection.shutdown();\n  }\n\n  get dialect() {\n    return 'postgresql';\n  }\n\n  async _each(sql, params, callback) {\n    this.log(sql);\n\n    let close = false;\n    let client = this.client;\n    let cursor = null;\n\n    if (client == null) {\n      close = true;\n      client = await Postgres.connect(this.options);\n    }\n\n    try {\n      cursor = client.query(sql);\n\n      while (cursor.hasRows) {\n        const result = await cursor.next();\n\n        if (result && callback) {\n          /* eslint-disable callback-return */\n          await callback({columns: result.columns, values: result.values, index: result.index, cursor});\n          /* eslint-enable callback-return */\n        }\n      }\n    } catch (ex) {\n      if (this.verbose) {\n        console.error('ERROR', ex);\n      }\n\n      throw ex;\n    } finally {\n      if (cursor) {\n        try {\n          await cursor.close();\n        } catch (err) {\n          // Closing the cursor on a connection where there was a previous error rethrows the same error\n          // This is because pumping the cursor to completion ends up carrying the original error to\n          // the end. This is desired behavior, we just have to swallow any potential errors here.\n        }\n      }\n\n      if (close) {\n        await client.close();\n      }\n    }\n  }\n\n  async close() {\n    if (this.client) {\n      await this.client.close();\n\n      this.client = null;\n    }\n  }\n\n  async query(sql, params) {\n    this.log(sql);\n\n    let client = this.client;\n\n    if (client == null) {\n      client = await Postgres.connect(this.options.db);\n    }\n\n    return client.query(sql, params);\n  }\n\n  async _execute(sql, params) {\n    let resultColumns = null;\n    const rows = [];\n\n    await this._each(sql, [], async ({columns, values, index, cursor}) => {\n      if (resultColumns == null) {\n        resultColumns = columns;\n      }\n\n      if (values) {\n        rows.push(values);\n      }\n    });\n\n    return { rows: rows, columns: resultColumns };\n  }\n\n  beginTransaction() {\n    if (this.client == null) {\n      throw new Error('client is null when beginning a transaction');\n    }\n\n    return this.execute('BEGIN TRANSACTION;');\n  }\n\n  commit() {\n    if (this.client == null) {\n      throw new Error('client is null when committing a transaction');\n    }\n\n    return this.execute('COMMIT TRANSACTION;');\n  }\n\n  rollback() {\n    if (this.client == null) {\n      throw new Error('client is null when rolling back a transaction');\n    }\n\n    return this.execute('ROLLBACK TRANSACTION;');\n  }\n\n  async transaction(block) {\n    // get a connection from the pool and make sure it gets used throughout the\n    // transaction block.\n    const client = await Postgres.connect(this.options);\n\n    const db = new Postgres(Object.assign({}, this.options, {client: client}));\n\n    await db.beginTransaction();\n\n    try {\n      await block(db);\n      await db.commit();\n    } catch (ex) {\n      try {\n        await db.rollback();\n      } catch (rollbackError) {\n        await db.close();\n        throw rollbackError;\n      }\n\n      throw ex;\n    } finally {\n      await db.close();\n    }\n  }\n\n  static transaction(options, block) {\n    if (options instanceof Postgres) {\n      return options.transaction(block);\n    }\n\n    return new Postgres(options).transaction(block);\n  }\n\n  static async using(options, block) {\n    const connection = await Postgres.connect(options);\n\n    const db = new Postgres(Object.assign({}, options, {client: connection}));\n\n    try {\n      await block(db);\n    } finally {\n      await connection.close();\n    }\n  }\n\n  arrayFormatString(array) {\n    if (Number.isInteger(array[0])) {\n      return 'ARRAY[%L]::bigint[]';\n    } else if (typeof array[0] === 'number') {\n      return 'ARRAY[%L]::double precision[]';\n    }\n\n    return 'ARRAY[%L]';\n  }\n\n  buildWhere(where) {\n    const clause = [];\n\n    if (where) {\n      for (const key of Object.keys(where)) {\n        const value = where[key];\n\n        if (value == null) {\n          clause.push(pgformat('%I IS NULL', key));\n        } else if (Array.isArray(value)) {\n          clause.push(value.length ? pgformat('%I = ANY (' + this.arrayFormatString(where[key]) + ')', key, value)\n                                   : pgformat('%I = ANY (%L)', key, '{}'));\n        } else {\n          clause.push(pgformat('%I = %L', key, value));\n        }\n      }\n    }\n\n    return [ clause, [] ];\n  }\n\n  buildInsert(attributes, includeNames = true) {\n    const names = [];\n    const values = [];\n    const placeholders = [];\n\n    // Use the literal values instead of placeholders  because parameterized\n    // queries require prepared statements. Prepared statements are stateful\n    // and impose requirements on the connection that are incompatible with\n    // pgbouncer.\n    for (const key of Object.keys(attributes)) {\n      if (includeNames) {\n        names.push(pgformat('%I', key));\n      }\n\n      const value = attributes[key];\n\n      if (Array.isArray(value)) {\n        placeholders.push(value.length ? pgformat('ARRAY[%L]', value) : \"'{}'\");\n      } else if (value && value.raw) {\n        placeholders.push(pgformat('%s', value.raw));\n      } else {\n        placeholders.push(pgformat('%L', value));\n      }\n    }\n\n    return [ names, placeholders, values ];\n  }\n\n  buildUpdate(attributes) {\n    const sets = [];\n    const values = [];\n\n    for (const key of Object.keys(attributes)) {\n      const value = attributes[key];\n\n      if (Array.isArray(value)) {\n        sets.push(value.length ? pgformat('%I = ARRAY[%L]', key, value) : pgformat('%I = %L', key, '{}'));\n      } else if (value && value.raw) {\n        sets.push(pgformat('%I = %s', value.raw));\n      } else {\n        sets.push(pgformat('%I = %L', key, value));\n      }\n    }\n\n    return [ sets, values ];\n  }\n\n  insertStatement(table, attributes, options) {\n    if (options == null || options.pk == null) {\n      throw new Error('pk is required');\n    }\n\n    const [ names, placeholders, values ] = this.buildInsert(attributes);\n\n    const returning = options && options.returnPrimaryKey === false ? '' : ' RETURNING ' + options.pk;\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES (%s)%s;',\n                       table,\n                       names.join(', '),\n                       placeholders.join(', '),\n                       returning);\n\n    return {sql, values};\n  }\n\n  insertStatements(table, arrayOfAttributes, options) {\n    const arrayOfValues = [];\n\n    let names = null;\n\n    for (const attributes of arrayOfAttributes) {\n      const insert = this.buildInsert(attributes, names == null);\n\n      if (names == null) {\n        names = insert[0];\n      }\n\n      arrayOfValues.push('(' + insert[1].join(', ') + ')');\n    }\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES %s;',\n                       table,\n                       names.join(', '),\n                       arrayOfValues.join(',\\n'));\n\n    return {sql, values: {}};\n  }\n\n  async insert(table, attributes, options) {\n    const statement = this.insertStatement(table, attributes, options);\n\n    const result = await this.all(statement.sql, statement.values);\n\n    return +result[0].id;\n  }\n\n  toDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return value.toISOString();\n\n      default:\n        return super.toDatabase(value, column);\n    }\n  }\n\n  fromDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return new Date(value);\n\n      default:\n        return super.fromDatabase(value, column);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}