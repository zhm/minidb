{"version":3,"sources":["../src/postgres.js"],"names":["pg","types","setTypeParser","val","parseInt","minipg","Postgres","Database","constructor","options","client","driver","PostgresConnection","ident","value","setNoticeProcessor","processor","Client","defaultNoticeProcessor","connect","db","shutdown","dialect","_each","sql","params","callback","log","close","cursor","query","hasRows","result","next","columns","values","index","ex","verbose","console","error","err","_execute","resultColumns","rows","push","beginTransaction","Error","execute","commit","rollback","transaction","block","Object","assign","rollbackError","using","connection","arrayFormatString","array","Number","isInteger","buildWhere","where","clause","key","keys","Array","isArray","length","buildInsert","attributes","includeNames","names","placeholders","raw","buildUpdate","sets","insertStatement","table","pk","returning","returnPrimaryKey","join","insertStatements","arrayOfAttributes","arrayOfValues","insert","statement","all","id","toDatabase","column","type","toISOString","fromDatabase","Date"],"mappings":"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","sourcesContent":["import PostgresConnection from './postgres-connection';\nimport pg from 'pg';\nimport pgformat from 'pg-format';\nimport { format } from 'util';\nimport esc from './esc';\nimport Database from './database';\n\n// Parse bigints as `Number` objects. If a caller *really* knows their\n// number cannot fit in a JS Number, it can be casted to `text` in\n// the query and parsed manually. Without this, dead simple COUNT(*)\n// queries are returned as text and it makes doing simple things hard.\npg.types.setTypeParser(20, (val) => {\n  return val == null ? null : parseInt(val, 10);\n});\n\nlet minipg = null;\n\nexport default class Postgres extends Database {\n  constructor(options) {\n    super(options);\n\n    this.client = options.client;\n  }\n\n  static set driver(driver) {\n    minipg = driver;\n    PostgresConnection.driver = driver;\n  }\n\n  ident(value) {\n    return esc(value, '\"');\n  }\n\n  static setNoticeProcessor(processor) {\n    minipg.Client.defaultNoticeProcessor = processor;\n  }\n\n  static async connect(db) {\n    return await PostgresConnection.connect(db);\n  }\n\n  static shutdown() {\n    PostgresConnection.shutdown();\n  }\n\n  get dialect() {\n    return 'postgresql';\n  }\n\n  async _each(sql, params, callback) {\n    this.log(sql);\n\n    let close = false;\n    let client = this.client;\n    let cursor = null;\n\n    if (client == null) {\n      close = true;\n      client = await Postgres.connect(this.options);\n    }\n\n    try {\n      cursor = client.query(sql);\n\n      while (cursor.hasRows) {\n        const result = await cursor.next();\n\n        if (result && callback) {\n          /* eslint-disable callback-return */\n          await callback({columns: result.columns, values: result.values, index: result.index, cursor});\n          /* eslint-enable callback-return */\n        }\n      }\n    } catch (ex) {\n      if (this.verbose) {\n        console.error('ERROR', ex);\n      }\n\n      throw ex;\n    } finally {\n      if (cursor) {\n        try {\n          await cursor.close();\n        } catch (err) {\n          // Closing the cursor on a connection where there was a previous error rethrows the same error\n          // This is because pumping the cursor to completion ends up carrying the original error to\n          // the end. This is desired behavior, we just have to swallow any potential errors here.\n        }\n      }\n\n      if (close) {\n        await client.close();\n      }\n    }\n  }\n\n  async close() {\n    if (this.client) {\n      await this.client.close();\n\n      this.client = null;\n    }\n  }\n\n  async query(sql, params) {\n    this.log(sql);\n\n    let client = this.client;\n\n    if (client == null) {\n      client = await Postgres.connect(this.options.db);\n    }\n\n    return client.query(sql, params);\n  }\n\n  async _execute(sql, params) {\n    let resultColumns = null;\n    const rows = [];\n\n    await this._each(sql, [], async ({columns, values, index, cursor}) => {\n      if (resultColumns == null) {\n        resultColumns = columns;\n      }\n\n      if (values) {\n        rows.push(values);\n      }\n    });\n\n    return { rows: rows, columns: resultColumns };\n  }\n\n  beginTransaction() {\n    if (this.client == null) {\n      throw new Error('client is null when beginning a transaction');\n    }\n\n    return this.execute('BEGIN TRANSACTION;');\n  }\n\n  commit() {\n    if (this.client == null) {\n      throw new Error('client is null when committing a transaction');\n    }\n\n    return this.execute('COMMIT TRANSACTION;');\n  }\n\n  rollback() {\n    if (this.client == null) {\n      throw new Error('client is null when rolling back a transaction');\n    }\n\n    return this.execute('ROLLBACK TRANSACTION;');\n  }\n\n  async transaction(block) {\n    // get a connection from the pool and make sure it gets used throughout the\n    // transaction block.\n    const client = await Postgres.connect(this.options);\n\n    const db = new Postgres(Object.assign({}, this.options, {client: client}));\n\n    await db.beginTransaction();\n\n    try {\n      await block(db);\n      await db.commit();\n    } catch (ex) {\n      try {\n        await db.rollback();\n      } catch (rollbackError) {\n        await db.close();\n        throw rollbackError;\n      }\n\n      throw ex;\n    } finally {\n      await db.close();\n    }\n  }\n\n  static transaction(options, block) {\n    if (options instanceof Postgres) {\n      return options.transaction(block);\n    }\n\n    return new Postgres(options).transaction(block);\n  }\n\n  static async using(options, block) {\n    const connection = await Postgres.connect(options);\n\n    const db = new Postgres(Object.assign({}, options, {client: connection}));\n\n    try {\n      await block(db);\n    } finally {\n      await connection.close();\n    }\n  }\n\n  arrayFormatString(array) {\n    if (Number.isInteger(array[0])) {\n      return 'ARRAY[%L]::bigint[]';\n    } else if (typeof array[0] === 'number') {\n      return 'ARRAY[%L]::double precision[]';\n    }\n\n    return 'ARRAY[%L]';\n  }\n\n  buildWhere(where) {\n    const clause = [];\n\n    if (where) {\n      for (const key of Object.keys(where)) {\n        const value = where[key];\n\n        if (value == null) {\n          clause.push(pgformat('%I IS NULL', key));\n        } else if (Array.isArray(value)) {\n          clause.push(value.length ? pgformat('%I = ANY (' + this.arrayFormatString(where[key]) + ')', key, value)\n                                   : pgformat('%I = ANY (%L)', key, '{}'));\n        } else {\n          clause.push(pgformat('%I = %L', key, value));\n        }\n      }\n    }\n\n    return [ clause, [] ];\n  }\n\n  buildInsert(attributes, includeNames = true) {\n    const names = [];\n    const values = [];\n    const placeholders = [];\n\n    // Use the literal values instead of placeholders  because parameterized\n    // queries require prepared statements. Prepared statements are stateful\n    // and impose requirements on the connection that are incompatible with\n    // pgbouncer.\n    for (const key of Object.keys(attributes)) {\n      if (includeNames) {\n        names.push(pgformat('%I', key));\n      }\n\n      const value = attributes[key];\n\n      if (Array.isArray(value)) {\n        placeholders.push(value.length ? pgformat('ARRAY[%L]', value) : \"'{}'\");\n      } else if (value && value.raw) {\n        placeholders.push(pgformat('%s', value.raw));\n      } else {\n        placeholders.push(pgformat('%L', value));\n      }\n    }\n\n    return [ names, placeholders, values ];\n  }\n\n  buildUpdate(attributes) {\n    const sets = [];\n    const values = [];\n\n    for (const key of Object.keys(attributes)) {\n      const value = attributes[key];\n\n      if (Array.isArray(value)) {\n        sets.push(value.length ? pgformat('%I = ARRAY[%L]', key, value) : pgformat('%I = %L', key, '{}'));\n      } else if (value && value.raw) {\n        sets.push(pgformat('%I = %s', value.raw));\n      } else {\n        sets.push(pgformat('%I = %L', key, value));\n      }\n    }\n\n    return [ sets, values ];\n  }\n\n  insertStatement(table, attributes, options) {\n    if (options == null || options.pk == null) {\n      throw new Error('pk is required');\n    }\n\n    const [ names, placeholders, values ] = this.buildInsert(attributes);\n\n    const returning = options && options.returnPrimaryKey === false ? '' : ' RETURNING ' + options.pk;\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES (%s)%s;',\n                       table,\n                       names.join(', '),\n                       placeholders.join(', '),\n                       returning);\n\n    return {sql, values};\n  }\n\n  insertStatements(table, arrayOfAttributes, options) {\n    const arrayOfValues = [];\n\n    let names = null;\n\n    for (const attributes of arrayOfAttributes) {\n      const insert = this.buildInsert(attributes, names == null);\n\n      if (names == null) {\n        names = insert[0];\n      }\n\n      arrayOfValues.push('(' + insert[1].join(', ') + ')');\n    }\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES %s;',\n                       table,\n                       names.join(', '),\n                       arrayOfValues.join(',\\n'));\n\n    return {sql, values: {}};\n  }\n\n  async insert(table, attributes, options) {\n    const statement = this.insertStatement(table, attributes, options);\n\n    const result = await this.all(statement.sql, statement.values);\n\n    return +result[0].id;\n  }\n\n  toDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return value.toISOString();\n\n      default:\n        return super.toDatabase(value, column);\n    }\n  }\n\n  fromDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return new Date(value);\n\n      default:\n        return super.fromDatabase(value, column);\n    }\n  }\n}\n"],"file":"postgres.js"}