{"version":3,"sources":["../src/database.js"],"names":["shortEnglishHumanizer","humanizeDuration","humanizer","language","languages","shortEn","ms","Database","constructor","options","setCustomType","typeName","definition","CUSTOM_TYPES","verbose","log","message","measure","text","block","debug","start","Date","getTime","result","error","ex","total","console","spacer","units","ident","value","literal","open","close","each","sql","params","callback","_each","execute","_execute","beginTransaction","commit","rollback","transaction","all","rows","columns","values","index","cursor","push","get","length","buildWhere","where","clause","key","Object","keys","buildInsert","attributes","names","placeholders","Array","isArray","join","buildUpdate","sets","name","findEachByAttributes","statement","findStatement","tableName","orderBy","limit","offset","findAllByAttributes","findFirstByAttributes","trace","profile","time","selection","parts","insertStatement","table","updateStatement","updateValues","apply","raw","whereValues","whereClause","deleteStatement","insert","lastID","update","delete","toDatabase","column","type","toString","JSON","stringify","fromDatabase","parse"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAEA,MAAMA,qBAAqB,GAAGC,0BAAiBC,SAAjB,CAA2B;AACvDC,EAAAA,QAAQ,EAAE,SAD6C;AAEvDC,EAAAA,SAAS,EAAE;AACTC,IAAAA,OAAO,EAAE;AACPC,MAAAA,EAAE,EAAE,MAAM;AADH;AADA;AAF4C,CAA3B,CAA9B;;AASe,MAAMC,QAAN,CAAe;AAG5BC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAEmB,SAAbC,aAAa,CAACC,QAAD,EAAWC,UAAX,EAAuB;AACzC,QAAIA,UAAJ,EAAgB;AACdL,MAAAA,QAAQ,CAACM,YAAT,CAAsBF,QAAtB,IAAkCC,UAAlC;AACD,KAFD,MAEO,IAAID,QAAJ,EAAc;AACnB,aAAOJ,QAAQ,CAACM,YAAT,CAAsBF,QAAtB,CAAP;AACD;AACF;;AAEU,MAAPG,OAAO,GAAG;AACZ,WAAO,KAAP,CADY,CAEZ;AACD;;AAEDC,EAAAA,GAAG,CAACC,OAAD,EAAU,CACX;AACA;AACA;AACD;;AAEmB,eAAPC,OAAO,CAACC,IAAD,EAAOC,KAAP,EAAc;AAChC,QAAI,CAACZ,QAAQ,CAACa,KAAd,EAAqB;AACnB,aAAO,MAAMD,KAAK,EAAlB;AACD;;AAED,UAAME,KAAK,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAd;AAEA,QAAIC,MAAM,GAAG,IAAb;AACA,QAAIC,KAAK,GAAG,IAAZ;;AAEA,QAAI;AACFD,MAAAA,MAAM,GAAG,MAAML,KAAK,EAApB;AACD,KAFD,CAEE,OAAOO,EAAP,EAAW;AACXD,MAAAA,KAAK,GAAGC,EAAR;AACD;;AAED,UAAMC,KAAK,GAAI,IAAIL,IAAJ,GAAWC,OAAX,EAAD,GAAyBF,KAAvC;AAEAO,IAAAA,OAAO,CAACb,GAAR,CAAY,WAAWf,qBAAqB,CAAC2B,KAAD,EAAQ;AAACE,MAAAA,MAAM,EAAE,EAAT;AAAaC,MAAAA,KAAK,EAAE,CAAE,IAAF;AAApB,KAAR,CAAhC,GAAyE,GAAzE,IAAgFL,KAAK,GAAG,UAAH,GAAgB,GAArG,IAA4GP,IAAxH;;AAEA,QAAIO,KAAJ,EAAW;AACT,YAAMA,KAAN;AACD;;AAED,WAAOD,MAAP;AACD;;AAEDO,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACX,WAAO,kBAAIA,KAAJ,EAAW,GAAX,CAAP;AACD;;AAEDC,EAAAA,OAAO,CAACD,KAAD,EAAQ;AACb,WAAO,kBAAIA,KAAJ,EAAW,GAAX,CAAP;AACD;;AAES,QAAJE,IAAI,GAAG;AACX,WAAO,IAAP;AACD;;AAEU,QAALC,KAAK,GAAG;AACZ,WAAO,IAAP;AACD;;AAES,QAAJC,IAAI,CAACC,GAAD,EAAMC,MAAN,EAAcC,QAAd,EAAwB;AAChC,WAAO,MAAMhC,QAAQ,CAACU,OAAT,CAAiBoB,GAAjB,EAAsB,YAAY;AAC7C,aAAO,MAAM,KAAKG,KAAL,CAAWH,GAAX,EAAgBC,MAAhB,EAAwBC,QAAxB,CAAb;AACD,KAFY,CAAb;AAGD;;AAEY,QAAPE,OAAO,CAACJ,GAAD,EAAMC,MAAN,EAAc;AACzB,WAAO,MAAM/B,QAAQ,CAACU,OAAT,CAAiBoB,GAAjB,EAAsB,YAAY;AAC7C,aAAO,MAAM,KAAKK,QAAL,CAAcL,GAAd,EAAmBC,MAAnB,CAAb;AACD,KAFY,CAAb;AAGD;;AAEDK,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAKF,OAAL,CAAa,oBAAb,CAAP;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKH,OAAL,CAAa,qBAAb,CAAP;AACD;;AAEDI,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKJ,OAAL,CAAa,uBAAb,CAAP;AACD;;AAEgB,QAAXK,WAAW,CAAC3B,KAAD,EAAQ;AACvB,UAAM,KAAKwB,gBAAL,EAAN;;AAEA,QAAI;AACF,YAAMxB,KAAK,CAAC,IAAD,CAAX;AACA,YAAM,KAAKyB,MAAL,EAAN;AACD,KAHD,CAGE,OAAOlB,EAAP,EAAW;AACXE,MAAAA,OAAO,CAACb,GAAR,CAAY,sBAAZ,EAAoCW,EAApC;AACA,YAAM,KAAKmB,QAAL,EAAN;AACA,YAAMnB,EAAN;AACD;AACF;;AAEQ,QAAHqB,GAAG,CAACV,GAAD,EAAMC,MAAN,EAAc;AACrB,UAAMU,IAAI,GAAG,EAAb;AAEA,UAAM,KAAKZ,IAAL,CAAUC,GAAV,EAAeC,MAAf,EAAuB,CAAC;AAACW,MAAAA,OAAD;AAAUC,MAAAA,MAAV;AAAkBC,MAAAA,KAAlB;AAAyBC,MAAAA;AAAzB,KAAD,KAAsC;AACjE,UAAIF,MAAJ,EAAY;AACVF,QAAAA,IAAI,CAACK,IAAL,CAAUH,MAAV;AACD;AACF,KAJK,CAAN;AAMA,WAAOF,IAAP;AACD;;AAEQ,QAAHM,GAAG,CAACjB,GAAD,EAAMC,MAAN,EAAc;AACrB,UAAMU,IAAI,GAAG,EAAb;AAEA,UAAM,KAAKZ,IAAL,CAAUC,GAAV,EAAeC,MAAf,EAAuB,CAAC;AAACW,MAAAA,OAAD;AAAUC,MAAAA,MAAV;AAAkBC,MAAAA,KAAlB;AAAyBC,MAAAA;AAAzB,KAAD,KAAsC;AACjE,UAAIF,MAAJ,EAAY;AACVF,QAAAA,IAAI,CAACK,IAAL,CAAUH,MAAV;AACD;AACF,KAJK,CAAN;AAMA,WAAQF,IAAI,CAACO,MAAL,GAAcP,IAAI,CAAC,CAAD,CAAlB,GAAwB,IAAhC;AACD;;AAEDQ,EAAAA,UAAU,CAACC,KAAD,EAAQ;AAChB,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMR,MAAM,GAAG,EAAf;;AAEA,QAAIO,KAAJ,EAAW;AACT,WAAK,MAAME,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,CAAlB,EAAsC;AACpC,cAAMzB,KAAK,GAAGyB,KAAK,CAACE,GAAD,CAAnB;;AAEA,YAAI3B,KAAK,IAAI,IAAb,EAAmB;AACjB0B,UAAAA,MAAM,CAACL,IAAP,CAAY,KAAKtB,KAAL,CAAW4B,GAAX,IAAkB,MAA9B;AACAT,UAAAA,MAAM,CAACG,IAAP,CAAYrB,KAAZ;AACD,SAHD,MAGO;AACL0B,UAAAA,MAAM,CAACL,IAAP,CAAY,KAAKtB,KAAL,CAAW4B,GAAX,IAAkB,UAA9B;AACD;AACF;AACF;;AAED,WAAO,CAAED,MAAF,EAAUR,MAAV,CAAP;AACD;;AAEDY,EAAAA,WAAW,CAACC,UAAD,EAAa;AACtB,UAAMC,KAAK,GAAG,EAAd;AACA,UAAMd,MAAM,GAAG,EAAf;AACA,UAAMe,YAAY,GAAG,EAArB;;AAEA,SAAK,MAAMN,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYE,UAAZ,CAAlB,EAA2C;AACzCC,MAAAA,KAAK,CAACX,IAAN,CAAW,KAAKtB,KAAL,CAAW4B,GAAX,CAAX;AACAM,MAAAA,YAAY,CAACZ,IAAb,CAAkB,GAAlB;AAEA,YAAMrB,KAAK,GAAG+B,UAAU,CAACJ,GAAD,CAAxB;;AAEA,UAAIO,KAAK,CAACC,OAAN,CAAcnC,KAAd,CAAJ,EAA0B;AACxBkB,QAAAA,MAAM,CAACG,IAAP,CAAY,OAAOrB,KAAK,CAACoC,IAAN,CAAW,IAAX,CAAP,GAA0B,IAAtC;AACD,OAFD,MAEO;AACLlB,QAAAA,MAAM,CAACG,IAAP,CAAYrB,KAAZ;AACD;AACF;;AAED,WAAO,CAAEgC,KAAF,EAASC,YAAT,EAAuBf,MAAvB,CAAP;AACD;;AAEDmB,EAAAA,WAAW,CAACN,UAAD,EAAa;AACtB,UAAMO,IAAI,GAAG,EAAb;AACA,UAAMpB,MAAM,GAAG,EAAf;;AAEA,SAAK,MAAMqB,IAAX,IAAmBX,MAAM,CAACC,IAAP,CAAYE,UAAZ,CAAnB,EAA4C;AAC1CO,MAAAA,IAAI,CAACjB,IAAL,CAAU,KAAKtB,KAAL,CAAWwC,IAAX,IAAmB,MAA7B;AAEA,YAAMvC,KAAK,GAAG+B,UAAU,CAACQ,IAAD,CAAxB;;AAEA,UAAIL,KAAK,CAACC,OAAN,CAAcnC,KAAd,CAAJ,EAA0B;AACxBkB,QAAAA,MAAM,CAACG,IAAP,CAAY,OAAOrB,KAAK,CAACoC,IAAN,CAAW,IAAX,CAAP,GAA0B,IAAtC;AACD,OAFD,MAEO;AACLlB,QAAAA,MAAM,CAACG,IAAP,CAAYrB,KAAZ;AACD;AACF;;AAED,WAAO,CAAEsC,IAAF,EAAQpB,MAAR,CAAP;AACD;;AAEDsB,EAAAA,oBAAoB,CAAC/D,OAAD,EAAU8B,QAAV,EAAoB;AACtC,UAAMkC,SAAS,GAAG,KAAKC,aAAL,CAAmBjE,OAAO,CAACkE,SAA3B,EACmBlE,OAAO,CAACwC,OAD3B,EAEmBxC,OAAO,CAACgD,KAF3B,EAGmBhD,OAAO,CAACmE,OAH3B,EAImBnE,OAAO,CAACoE,KAJ3B,EAKmBpE,OAAO,CAACqE,MAL3B,CAAlB;AAOA,WAAO,KAAK1C,IAAL,CAAUqC,SAAS,CAACpC,GAApB,EAAyBoC,SAAS,CAACvB,MAAnC,EAA2CX,QAA3C,CAAP;AACD;;AAEDwC,EAAAA,mBAAmB,CAACJ,SAAD,EAAY1B,OAAZ,EAAqBQ,KAArB,EAA4BmB,OAA5B,EAAqCC,KAArC,EAA4CC,MAA5C,EAAoD;AACrE,UAAML,SAAS,GAAG,KAAKC,aAAL,CAAmBC,SAAnB,EAA8B1B,OAA9B,EAAuCQ,KAAvC,EAA8CmB,OAA9C,EAAuDC,KAAvD,EAA8DC,MAA9D,CAAlB;AAEA,WAAO,KAAK/B,GAAL,CAAS0B,SAAS,CAACpC,GAAnB,EAAwBoC,SAAS,CAACvB,MAAlC,CAAP;AACD;;AAE0B,QAArB8B,qBAAqB,CAACL,SAAD,EAAY1B,OAAZ,EAAqBc,UAArB,EAAiCa,OAAjC,EAA0C;AACnE,UAAM5B,IAAI,GAAG,MAAM,KAAK+B,mBAAL,CAAyBJ,SAAzB,EAAoC1B,OAApC,EAA6Cc,UAA7C,EAAyDa,OAAzD,EAAkE,CAAlE,CAAnB;AAEA,WAAO5B,IAAI,IAAI,IAAR,GAAeA,IAAI,CAAC,CAAD,CAAnB,GAAyB,IAAhC;AACD;;AAEDiC,EAAAA,KAAK,GAAG;AACN,WAAO,IAAP;AACD;;AAEDC,EAAAA,OAAO,CAAC7C,GAAD,EAAM8C,IAAN,EAAY;AACjBvD,IAAAA,OAAO,CAACb,GAAR,CAAY,SAAZ,EAAuB,MAAMoE,IAAN,GAAa,KAApC,EAA2C9C,GAA3C;AACD;;AAEDqC,EAAAA,aAAa,CAACC,SAAD,EAAY1B,OAAZ,EAAqBQ,KAArB,EAA4BmB,OAA5B,EAAqCC,KAArC,EAA4CC,MAA5C,EAAoD;AAC/D,UAAMM,SAAS,GAAInC,OAAO,IAAI,IAAX,GAAkB,CAAE,GAAF,CAAlB,GAA4BA,OAA/C;AAEA,UAAM,CAAES,MAAF,EAAUR,MAAV,IAAqB,KAAKM,UAAL,CAAgBC,KAAhB,CAA3B;AAEA,UAAM4B,KAAK,GAAG,EAAd;;AAEA,QAAI3B,MAAM,CAACH,MAAP,GAAgB,CAApB,EAAuB;AACrB8B,MAAAA,KAAK,CAAChC,IAAN,CAAW,kBAAO,WAAP,EAAoBK,MAAM,CAACU,IAAP,CAAY,OAAZ,CAApB,CAAX;AACD;;AAED,QAAIQ,OAAO,IAAI,IAAf,EAAqB;AACnBS,MAAAA,KAAK,CAAChC,IAAN,CAAW,kBAAO,cAAP,EAAuBuB,OAAvB,CAAX;AACD;;AAED,QAAIC,KAAK,IAAI,IAAb,EAAmB;AACjBQ,MAAAA,KAAK,CAAChC,IAAN,CAAW,kBAAO,WAAP,EAAoB,KAAKpB,OAAL,CAAa4C,KAAb,CAApB,CAAX;AACD;;AAED,QAAIC,MAAM,IAAI,IAAd,EAAoB;AAClBO,MAAAA,KAAK,CAAChC,IAAN,CAAW,kBAAO,YAAP,EAAqB,KAAKpB,OAAL,CAAa6C,MAAb,CAArB,CAAX;AACD;;AAED,UAAMzC,GAAG,GAAG,kBAAO,qBAAP,EACO+C,SAAS,CAAChB,IAAV,CAAe,IAAf,CADP,EAEO,KAAKrC,KAAL,CAAW4C,SAAX,CAFP,EAGOU,KAAK,CAACjB,IAAN,CAAW,EAAX,CAHP,CAAZ;AAKA,WAAO;AAAC/B,MAAAA,GAAD;AAAMa,MAAAA;AAAN,KAAP;AACD;;AAEDoC,EAAAA,eAAe,CAACC,KAAD,EAAQxB,UAAR,EAAoB;AACjC,UAAM,CAAEC,KAAF,EAASC,YAAT,EAAuBf,MAAvB,IAAkC,KAAKY,WAAL,CAAiBC,UAAjB,CAAxC;AAEA,UAAM1B,GAAG,GAAG,kBAAO,mCAAP,EACOkD,KADP,EAEOvB,KAAK,CAACI,IAAN,CAAW,IAAX,CAFP,EAGOH,YAAY,CAACG,IAAb,CAAkB,IAAlB,CAHP,CAAZ;AAKA,WAAO;AAAC/B,MAAAA,GAAD;AAAMa,MAAAA;AAAN,KAAP;AACD;;AAEDsC,EAAAA,eAAe,CAACD,KAAD,EAAQ9B,KAAR,EAAeM,UAAf,EAA2BtD,OAA3B,EAAoC;AACjD,UAAMyC,MAAM,GAAG,EAAf;AAEA,UAAM,CAAEoB,IAAF,EAAQmB,YAAR,IAAyB,KAAKpB,WAAL,CAAiBN,UAAjB,CAA/B;AAEAb,IAAAA,MAAM,CAACG,IAAP,CAAYqC,KAAZ,CAAkBxC,MAAlB,EAA0BuC,YAA1B;;AAEA,QAAIhF,OAAO,IAAIA,OAAO,CAACkF,GAAvB,EAA4B;AAC1B,WAAK,MAAMpB,IAAX,IAAmBX,MAAM,CAACC,IAAP,CAAYpD,OAAO,CAACkF,GAApB,CAAnB,EAA6C;AAC3CrB,QAAAA,IAAI,CAACjB,IAAL,CAAU,kBAAO,SAAP,EAAkBkB,IAAlB,EAAwB9D,OAAO,CAACkF,GAAR,CAAYpB,IAAZ,CAAxB,CAAV;AACD;AACF;;AAED,UAAM,CAAEb,MAAF,EAAUkC,WAAV,IAA0B,KAAKpC,UAAL,CAAgBC,KAAhB,CAAhC;AAEAP,IAAAA,MAAM,CAACG,IAAP,CAAYqC,KAAZ,CAAkBxC,MAAlB,EAA0B0C,WAA1B;AAEA,UAAMC,WAAW,GAAGnC,MAAM,CAACH,MAAP,GAAgB,YAAYG,MAAM,CAACU,IAAP,CAAY,OAAZ,CAA5B,GAAmD,EAAvE;AAEA,UAAM/B,GAAG,GAAG,kBAAO,qBAAP,EACOkD,KADP,EACcjB,IAAI,CAACF,IAAL,CAAU,IAAV,CADd,EAC+ByB,WAD/B,CAAZ;AAGA,WAAO;AAACxD,MAAAA,GAAD;AAAMa,MAAAA;AAAN,KAAP;AACD;;AAED4C,EAAAA,eAAe,CAACP,KAAD,EAAQ9B,KAAR,EAAe;AAC5B,UAAM,CAAEC,MAAF,EAAUR,MAAV,IAAqB,KAAKM,UAAL,CAAgBC,KAAhB,CAA3B;AAEA,UAAMoC,WAAW,GAAGnC,MAAM,CAACH,MAAP,GAAgB,YAAYG,MAAM,CAACU,IAAP,CAAY,OAAZ,CAA5B,GAAmD,EAAvE;AAEA,UAAM/B,GAAG,GAAG,kBAAO,mBAAP,EACOkD,KADP,EACcM,WADd,CAAZ;AAGA,WAAO;AAACxD,MAAAA,GAAD;AAAMa,MAAAA;AAAN,KAAP;AACD;;AAEW,QAAN6C,MAAM,CAACR,KAAD,EAAQxB,UAAR,EAAoBtD,OAApB,EAA6B;AACvC,UAAMgE,SAAS,GAAG,KAAKa,eAAL,CAAqBC,KAArB,EAA4BxB,UAA5B,CAAlB;AAEA,UAAM,KAAKtB,OAAL,CAAagC,SAAS,CAACpC,GAAvB,EAA4BoC,SAAS,CAACvB,MAAtC,CAAN;AAEA,WAAO,KAAK8C,MAAZ;AACD;;AAEW,QAANC,MAAM,CAACV,KAAD,EAAQ9B,KAAR,EAAeM,UAAf,EAA2BtD,OAA3B,EAAoC;AAC9C,UAAMgE,SAAS,GAAG,KAAKe,eAAL,CAAqBD,KAArB,EAA4B9B,KAA5B,EAAmCM,UAAnC,EAA+CtD,OAA/C,CAAlB;AAEA,UAAM,KAAKgC,OAAL,CAAagC,SAAS,CAACpC,GAAvB,EAA4BoC,SAAS,CAACvB,MAAtC,CAAN;AAEA,WAAO,IAAP;AACD;;AAEW,QAANgD,MAAM,CAACX,KAAD,EAAQ9B,KAAR,EAAehD,OAAf,EAAwB;AAClC,UAAMgE,SAAS,GAAG,KAAKqB,eAAL,CAAqBP,KAArB,EAA4B9B,KAA5B,CAAlB;AAEA,UAAM,KAAKhB,OAAL,CAAagC,SAAS,CAACpC,GAAvB,EAA4BoC,SAAS,CAACvB,MAAtC,CAAN;AAEA,WAAO,IAAP;AACD;;AAEDiD,EAAAA,UAAU,CAACnE,KAAD,EAAQoE,MAAR,EAAgB;AACxB,QAAIpE,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAIzB,QAAQ,CAACM,YAAT,CAAsBuF,MAAM,CAACC,IAA7B,CAAJ,EAAwC;AACtC,aAAO9F,QAAQ,CAACM,YAAT,CAAsBuF,MAAM,CAACC,IAA7B,EAAmCF,UAAnC,CAA8CnE,KAA9C,EAAqDoE,MAArD,CAAP;AACD;;AAED,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,QAAL;AACE,eAAOrE,KAAK,CAACsE,QAAN,EAAP;;AAEF,WAAK,SAAL;AACE,eAAO,CAACtE,KAAR;;AAEF,WAAK,QAAL;AACE,eAAO,CAACA,KAAR;;AAEF,WAAK,SAAL;AACE,eAAO,CAAC,CAACA,KAAT;;AAEF,WAAK,UAAL;AACE,eAAOA,KAAP;;AAEF,WAAK,MAAL;AACE,eAAOuE,IAAI,CAACC,SAAL,CAAexE,KAAf,CAAP;;AAEF;AACE,eAAOA,KAAK,CAACsE,QAAN,EAAP;AApBJ;AAsBD;;AAEDG,EAAAA,YAAY,CAACzE,KAAD,EAAQoE,MAAR,EAAgB;AAC1B,QAAIpE,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAIzB,QAAQ,CAACM,YAAT,CAAsBuF,MAAM,CAACC,IAA7B,CAAJ,EAAwC;AACtC,aAAO9F,QAAQ,CAACM,YAAT,CAAsBuF,MAAM,CAACC,IAA7B,EAAmCI,YAAnC,CAAgDzE,KAAhD,EAAuDoE,MAAvD,CAAP;AACD;;AAED,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,QAAL;AACE,eAAOrE,KAAK,CAACsE,QAAN,EAAP;;AAEF,WAAK,SAAL;AACE,eAAO,CAACtE,KAAR;;AAEF,WAAK,QAAL;AACE,eAAO,CAACA,KAAR;;AAEF,WAAK,SAAL;AACE,eAAO,CAAC,CAACA,KAAT;;AAEF,WAAK,UAAL;AACE,eAAO,IAAIV,IAAJ,CAAS,CAACU,KAAV,CAAP;;AAEF,WAAK,MAAL;AACE,eAAOuE,IAAI,CAACG,KAAL,CAAW1E,KAAX,CAAP;;AAEF;AACE,eAAOA,KAAK,CAACsE,QAAN,EAAP;AApBJ;AAsBD;;AAnY2B;;;;gBAAT/F,Q,kBACG,E","sourcesContent":["import { format } from 'util';\nimport esc from './esc';\nimport humanizeDuration from 'humanize-duration';\n\nconst shortEnglishHumanizer = humanizeDuration.humanizer({\n  language: 'shortEn',\n  languages: {\n    shortEn: {\n      ms: () => 'ms'\n    }\n  }\n});\n\nexport default class Database {\n  static CUSTOM_TYPES = {};\n\n  constructor(options) {\n    this.options = options;\n  }\n\n  static setCustomType(typeName, definition) {\n    if (definition) {\n      Database.CUSTOM_TYPES[typeName] = definition;\n    } else if (typeName) {\n      delete Database.CUSTOM_TYPES[typeName];\n    }\n  }\n\n  get verbose() {\n    return false;\n    // return true;\n  }\n\n  log(message) {\n    // if (Database.debug) {\n    //   console.warn('[SQL]', message);\n    // }\n  }\n\n  static async measure(text, block) {\n    if (!Database.debug) {\n      return await block();\n    }\n\n    const start = new Date().getTime();\n\n    let result = null;\n    let error = null;\n\n    try {\n      result = await block();\n    } catch (ex) {\n      error = ex;\n    }\n\n    const total = (new Date().getTime()) - start;\n\n    console.log('[SQL][' + shortEnglishHumanizer(total, {spacer: '', units: [ 'ms' ]}) + ']' + (error ? '[ERROR] ' : ' ') + text);\n\n    if (error) {\n      throw error;\n    }\n\n    return result;\n  }\n\n  ident(value) {\n    return esc(value, '`');\n  }\n\n  literal(value) {\n    return esc(value, \"'\");\n  }\n\n  async open() {\n    return null;\n  }\n\n  async close() {\n    return null;\n  }\n\n  async each(sql, params, callback) {\n    return await Database.measure(sql, async () => {\n      return await this._each(sql, params, callback);\n    });\n  }\n\n  async execute(sql, params) {\n    return await Database.measure(sql, async () => {\n      return await this._execute(sql, params);\n    });\n  }\n\n  beginTransaction() {\n    return this.execute('BEGIN TRANSACTION;');\n  }\n\n  commit() {\n    return this.execute('COMMIT TRANSACTION;');\n  }\n\n  rollback() {\n    return this.execute('ROLLBACK TRANSACTION;');\n  }\n\n  async transaction(block) {\n    await this.beginTransaction();\n\n    try {\n      await block(this);\n      await this.commit();\n    } catch (ex) {\n      console.log('ERROR IN TRANSACTION', ex);\n      await this.rollback();\n      throw ex;\n    }\n  }\n\n  async all(sql, params) {\n    const rows = [];\n\n    await this.each(sql, params, ({columns, values, index, cursor}) => {\n      if (values) {\n        rows.push(values);\n      }\n    });\n\n    return rows;\n  }\n\n  async get(sql, params) {\n    const rows = [];\n\n    await this.each(sql, params, ({columns, values, index, cursor}) => {\n      if (values) {\n        rows.push(values);\n      }\n    });\n\n    return (rows.length ? rows[0] : null);\n  }\n\n  buildWhere(where) {\n    const clause = [];\n    const values = [];\n\n    if (where) {\n      for (const key of Object.keys(where)) {\n        const value = where[key];\n\n        if (value != null) {\n          clause.push(this.ident(key) + ' = ?');\n          values.push(value);\n        } else {\n          clause.push(this.ident(key) + ' IS NULL');\n        }\n      }\n    }\n\n    return [ clause, values ];\n  }\n\n  buildInsert(attributes) {\n    const names = [];\n    const values = [];\n    const placeholders = [];\n\n    for (const key of Object.keys(attributes)) {\n      names.push(this.ident(key));\n      placeholders.push('?');\n\n      const value = attributes[key];\n\n      if (Array.isArray(value)) {\n        values.push('\\t' + value.join('\\t') + '\\t');\n      } else {\n        values.push(value);\n      }\n    }\n\n    return [ names, placeholders, values ];\n  }\n\n  buildUpdate(attributes) {\n    const sets = [];\n    const values = [];\n\n    for (const name of Object.keys(attributes)) {\n      sets.push(this.ident(name) + ' = ?');\n\n      const value = attributes[name];\n\n      if (Array.isArray(value)) {\n        values.push('\\t' + value.join('\\t') + '\\t');\n      } else {\n        values.push(value);\n      }\n    }\n\n    return [ sets, values ];\n  }\n\n  findEachByAttributes(options, callback) {\n    const statement = this.findStatement(options.tableName,\n                                         options.columns,\n                                         options.where,\n                                         options.orderBy,\n                                         options.limit,\n                                         options.offset);\n\n    return this.each(statement.sql, statement.values, callback);\n  }\n\n  findAllByAttributes(tableName, columns, where, orderBy, limit, offset) {\n    const statement = this.findStatement(tableName, columns, where, orderBy, limit, offset);\n\n    return this.all(statement.sql, statement.values);\n  }\n\n  async findFirstByAttributes(tableName, columns, attributes, orderBy) {\n    const rows = await this.findAllByAttributes(tableName, columns, attributes, orderBy, 1);\n\n    return rows != null ? rows[0] : null;\n  }\n\n  trace() {\n    return null;\n  }\n\n  profile(sql, time) {\n    console.log('PROFILE', '(' + time + 'ms)', sql);\n  }\n\n  findStatement(tableName, columns, where, orderBy, limit, offset) {\n    const selection = (columns == null ? [ '*' ] : columns);\n\n    const [ clause, values ] = this.buildWhere(where);\n\n    const parts = [];\n\n    if (clause.length > 0) {\n      parts.push(format(' WHERE %s', clause.join(' AND ')));\n    }\n\n    if (orderBy != null) {\n      parts.push(format(' ORDER BY %s', orderBy));\n    }\n\n    if (limit != null) {\n      parts.push(format(' LIMIT %s', this.literal(limit)));\n    }\n\n    if (offset != null) {\n      parts.push(format(' OFFSET %s', this.literal(offset)));\n    }\n\n    const sql = format('SELECT %s FROM %s%s',\n                       selection.join(', '),\n                       this.ident(tableName),\n                       parts.join(''));\n\n    return {sql, values};\n  }\n\n  insertStatement(table, attributes) {\n    const [ names, placeholders, values ] = this.buildInsert(attributes);\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES (%s);',\n                       table,\n                       names.join(', '),\n                       placeholders.join(', '));\n\n    return {sql, values};\n  }\n\n  updateStatement(table, where, attributes, options) {\n    const values = [];\n\n    const [ sets, updateValues ] = this.buildUpdate(attributes);\n\n    values.push.apply(values, updateValues);\n\n    if (options && options.raw) {\n      for (const name of Object.keys(options.raw)) {\n        sets.push(format('%s = %s', name, options.raw[name]));\n      }\n    }\n\n    const [ clause, whereValues ] = this.buildWhere(where);\n\n    values.push.apply(values, whereValues);\n\n    const whereClause = clause.length ? ' WHERE ' + clause.join(' AND ') : '';\n\n    const sql = format('UPDATE %s SET %s%s;',\n                       table, sets.join(', '), whereClause);\n\n    return {sql, values};\n  }\n\n  deleteStatement(table, where) {\n    const [ clause, values ] = this.buildWhere(where);\n\n    const whereClause = clause.length ? ' WHERE ' + clause.join(' AND ') : '';\n\n    const sql = format('DELETE FROM %s%s;',\n                       table, whereClause);\n\n    return {sql, values};\n  }\n\n  async insert(table, attributes, options) {\n    const statement = this.insertStatement(table, attributes);\n\n    await this.execute(statement.sql, statement.values);\n\n    return this.lastID;\n  }\n\n  async update(table, where, attributes, options) {\n    const statement = this.updateStatement(table, where, attributes, options);\n\n    await this.execute(statement.sql, statement.values);\n\n    return null;\n  }\n\n  async delete(table, where, options) {\n    const statement = this.deleteStatement(table, where);\n\n    await this.execute(statement.sql, statement.values);\n\n    return null;\n  }\n\n  toDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    if (Database.CUSTOM_TYPES[column.type]) {\n      return Database.CUSTOM_TYPES[column.type].toDatabase(value, column);\n    }\n\n    switch (column.type) {\n      case 'string':\n        return value.toString();\n\n      case 'integer':\n        return +value;\n\n      case 'double':\n        return +value;\n\n      case 'boolean':\n        return !!value;\n\n      case 'datetime':\n        return value;\n\n      case 'json':\n        return JSON.stringify(value);\n\n      default:\n        return value.toString();\n    }\n  }\n\n  fromDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    if (Database.CUSTOM_TYPES[column.type]) {\n      return Database.CUSTOM_TYPES[column.type].fromDatabase(value, column);\n    }\n\n    switch (column.type) {\n      case 'string':\n        return value.toString();\n\n      case 'integer':\n        return +value;\n\n      case 'double':\n        return +value;\n\n      case 'boolean':\n        return !!value;\n\n      case 'datetime':\n        return new Date(+value);\n\n      case 'json':\n        return JSON.parse(value);\n\n      default:\n        return value.toString();\n    }\n  }\n}\n"],"file":"database.js"}