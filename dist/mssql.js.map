{"version":3,"sources":["../src/mssql.js"],"names":["mssql","MSSQL","Database","constructor","options","client","driver","ident","value","connect","db","PostgresConnection","shutdown","dialect","_each","sql","params","callback","Error","close","query","_execute","beginTransaction","commit","rollback","transaction","block","using","arrayFormatString","array","Number","isInteger","buildWhere","where","clause","key","Object","keys","push","buildInsert","attributes","includeNames","names","values","placeholders","Array","isArray","toString","Date","toISOString","raw","buildUpdate","sets","insertStatement","table","pk","join","insertStatements","arrayOfAttributes","arrayOfValues","insert","statement","result","all","id","toDatabase","column","type","fromDatabase"],"mappings":"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","sourcesContent":["import PostgresConnection from './postgres-connection';\nimport mssqlformat from './mssql-format';\nimport { format } from 'util';\nimport esc from './esc';\nimport Database from './database';\n\nlet mssql = null;\n\nexport default class MSSQL extends Database {\n  constructor(options) {\n    super(options);\n\n    this.client = options.client;\n  }\n\n  static set driver(driver) {\n    mssql = driver;\n    // PostgresConnection.driver = driver;\n  }\n\n  ident(value) {\n    return esc(value, '\"');\n  }\n\n  static async connect(db) {\n    return await PostgresConnection.connect(db);\n  }\n\n  static shutdown() {\n    PostgresConnection.shutdown();\n  }\n\n  get dialect() {\n    return 'mssql';\n  }\n\n  async _each(sql, params, callback) {\n    throw new Error('not implemented');\n  }\n\n  async close() {\n    throw new Error('not implemented');\n  }\n\n  async query(sql, params) {\n    throw new Error('not implemented');\n  }\n\n  async _execute(sql, params) {\n    throw new Error('not implemented');\n  }\n\n  beginTransaction() {\n    throw new Error('not implemented');\n  }\n\n  commit() {\n    throw new Error('not implemented');\n  }\n\n  rollback() {\n    throw new Error('not implemented');\n  }\n\n  async transaction(block) {\n    throw new Error('not implemented');\n  }\n\n  static transaction(options, block) {\n    throw new Error('not implemented');\n  }\n\n  static async using(options, block) {\n    throw new Error('not implemented');\n  }\n\n  arrayFormatString(array) {\n    if (Number.isInteger(array[0])) {\n      return 'ARRAY[%L]::bigint[]';\n    } else if (typeof array[0] === 'number') {\n      return 'ARRAY[%L]::double precision[]';\n    }\n\n    return 'ARRAY[%L]';\n  }\n\n  buildWhere(where) {\n    const clause = [];\n\n    if (where) {\n      for (const key of Object.keys(where)) {\n        const value = where[key];\n\n        if (value == null) {\n          clause.push(format('[%s] IS NULL', key));\n        // } else if (Array.isArray(value)) {\n        //   clause.push(mssqlformat('%I = ANY (' + this.arrayFormatString(where[key]) + ')', key, value));\n        } else {\n          clause.push(mssqlformat('[%s] = %L', key, value));\n        }\n      }\n    }\n\n    return [ clause, [] ];\n  }\n\n  buildInsert(attributes, includeNames = true) {\n    const names = [];\n    const values = [];\n    const placeholders = [];\n\n    // Use the literal values instead of placeholders  because parameterized\n    // queries require prepared statements. Prepared statements are stateful\n    // and impose requirements on the connection that are incompatible with\n    // pgbouncer.\n    for (const key of Object.keys(attributes)) {\n      if (includeNames) {\n        names.push(format('[%s]', key));\n      }\n\n      const value = attributes[key];\n\n      if (Array.isArray(value)) {\n        // placeholders.push(format('ARRAY[%L]', value));\n        placeholders.push(mssqlformat('%L', value.toString()));\n      } else if (value instanceof Date) {\n        placeholders.push(mssqlformat('%L', value.toISOString()));\n      } else if (value && value.raw) {\n        placeholders.push(format('%s', value.raw));\n      } else {\n        placeholders.push(mssqlformat('%L', value));\n      }\n    }\n\n    return [ names, placeholders, values ];\n  }\n\n  buildUpdate(attributes) {\n    const sets = [];\n    const values = [];\n\n    for (const key of Object.keys(attributes)) {\n      const value = attributes[key];\n\n      if (Array.isArray(value)) {\n        // sets.push(mssqlformat('%I = ARRAY[%L]', key, value));\n        sets.push(mssqlformat('[%s] = %L', key, value));\n      } else if (value instanceof Date) {\n        sets.push(mssqlformat('[%s] = %L', key, value.toISOString()));\n      } else if (value && value.raw) {\n        sets.push(format('[%s] = %s', value.raw));\n      } else {\n        sets.push(mssqlformat('[%s] = %L', key, value));\n      }\n    }\n\n    return [ sets, values ];\n  }\n\n  insertStatement(table, attributes, options) {\n    if (options == null || options.pk == null) {\n      throw new Error('pk is required');\n    }\n\n    const [ names, placeholders, values ] = this.buildInsert(attributes);\n\n    // const returning = options && options.returnPrimaryKey === false ? '' : ' RETURNING ' + options.pk;\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES (%s)%s;',\n                       table,\n                       names.join(', '),\n                       placeholders.join(', '),\n                       '');\n\n    return {sql, values};\n  }\n\n  insertStatements(table, arrayOfAttributes, options) {\n    const arrayOfValues = [];\n\n    let names = null;\n\n    for (const attributes of arrayOfAttributes) {\n      const insert = this.buildInsert(attributes, names == null);\n\n      if (names == null) {\n        names = insert[0];\n      }\n\n      arrayOfValues.push('(' + insert[1].join(', ') + ')');\n    }\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES %s;',\n                       table,\n                       names.join(', '),\n                       arrayOfValues.join(',\\n'));\n\n    return {sql, values: {}};\n  }\n\n  async insert(table, attributes, options) {\n    const statement = this.insertStatement(table, attributes, options);\n\n    const result = await this.all(statement.sql, statement.values);\n\n    return +result[0].id;\n  }\n\n  toDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return value.toISOString();\n\n      default:\n        return super.toDatabase(value, column);\n    }\n  }\n\n  fromDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return new Date(value);\n\n      default:\n        return super.fromDatabase(value, column);\n    }\n  }\n}\n"],"file":"mssql.js"}