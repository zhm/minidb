{"version":3,"sources":["../src/database-cursor.js"],"names":["DatabaseCursor","constructor","connection","rawCursor","converter","_connection","_rawCursor","_converter","_finished","parseValues","columns","values","parsedValues","i","length","value","column","name","hasRows","next","Promise","resolve","reject","err","finished","index","client","close"],"mappings":";;;;;;;AAAe,MAAMA,cAAN,CAAqB;AAClCC,EAAAA,WAAW,CAACC,UAAD,EAAaC,SAAb,EAAwBC,SAAxB,EAAmC;AAC5C,SAAKC,WAAL,GAAmBH,UAAnB;AACA,SAAKI,UAAL,GAAkBH,SAAlB;AACA,SAAKI,UAAL,GAAkBH,SAAlB;AACA,SAAKI,SAAL,GAAiB,KAAjB;AACD;;AAEa,MAAVN,UAAU,GAAG;AACf,WAAO,KAAKG,WAAZ;AACD;;AAEDI,EAAAA,WAAW,CAACC,OAAD,EAAUC,MAAV,EAAkB;AAC3B,QAAIC,YAAY,GAAG,IAAnB;;AAEA,QAAID,MAAJ,EAAY;AACVC,MAAAA,YAAY,GAAG,EAAf;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACI,MAA5B,EAAoC,EAAED,CAAtC,EAAyC;AACvC,YAAIE,KAAK,GAAGJ,MAAM,CAACE,CAAD,CAAlB;AACA,cAAMG,MAAM,GAAGN,OAAO,CAACG,CAAD,CAAtB;;AAEA,YAAIE,KAAK,IAAI,IAAT,IAAiB,KAAKR,UAA1B,EAAsC;AACpCQ,UAAAA,KAAK,GAAG,KAAKR,UAAL,CAAgB;AAACS,YAAAA,MAAD;AAASD,YAAAA;AAAT,WAAhB,CAAR;AACD;;AAEDH,QAAAA,YAAY,CAACI,MAAM,CAACC,IAAR,CAAZ,GAA4BF,KAA5B;AACD;AACF;;AAED,WAAOH,YAAP;AACD;;AAEU,MAAPM,OAAO,GAAG;AACZ,WAAO,CAAC,KAAKV,SAAb;AACD;;AAES,QAAJW,IAAI,GAAG;AACX,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,WAAKhB,UAAL,CAAgBa,IAAhB,CAAqB,CAACI,GAAD,EAAM;AAACC,QAAAA,QAAD;AAAWd,QAAAA,OAAX;AAAoBC,QAAAA,MAApB;AAA4Bc,QAAAA,KAA5B;AAAmCC,QAAAA;AAAnC,OAAN,KAAqD;AACxE,aAAKlB,SAAL,GAAiBgB,QAAjB;;AAEA,YAAID,GAAJ,EAAS;AACP,iBAAOD,MAAM,CAACC,GAAD,CAAb;AACD,SAFD,MAEO,IAAIC,QAAJ,EAAc;AACnB,iBAAOH,OAAO,CAAC,IAAD,CAAd;AACD;;AAED,eAAOA,OAAO,CAAC;AAACX,UAAAA,OAAO,EAAEA,OAAV;AACCC,UAAAA,MAAM,EAAED,OAAO,IAAI,KAAKD,WAAL,CAAiBC,OAAjB,EAA0BC,MAA1B,CADpB;AAECc,UAAAA,KAAK,EAAEA,KAFR;AAGCC,UAAAA;AAHD,SAAD,CAAd;AAID,OAbD;AAcD,KAfM,CAAP;AAgBD;;AAEU,QAALC,KAAK,GAAG;AACZ;AACA,WAAO,CAAC,KAAKrB,UAAL,CAAgBkB,QAAxB,EAAkC;AAChC,YAAM,KAAKL,IAAL,EAAN;AACD;AACF;;AA7DiC","sourcesContent":["export default class DatabaseCursor {\n  constructor(connection, rawCursor, converter) {\n    this._connection = connection;\n    this._rawCursor = rawCursor;\n    this._converter = converter;\n    this._finished = false;\n  }\n\n  get connection() {\n    return this._connection;\n  }\n\n  parseValues(columns, values) {\n    let parsedValues = null;\n\n    if (values) {\n      parsedValues = {};\n\n      for (let i = 0; i < columns.length; ++i) {\n        let value = values[i];\n        const column = columns[i];\n\n        if (value != null && this._converter) {\n          value = this._converter({column, value});\n        }\n\n        parsedValues[column.name] = value;\n      }\n    }\n\n    return parsedValues;\n  }\n\n  get hasRows() {\n    return !this._finished;\n  }\n\n  async next() {\n    return new Promise((resolve, reject) => {\n      this._rawCursor.next((err, {finished, columns, values, index, client}) => {\n        this._finished = finished;\n\n        if (err) {\n          return reject(err);\n        } else if (finished) {\n          return resolve(null);\n        }\n\n        return resolve({columns: columns,\n                        values: columns && this.parseValues(columns, values),\n                        index: index,\n                        client});\n      });\n    });\n  }\n\n  async close() {\n    // exhaust the cursor to completion\n    while (!this._rawCursor.finished) {\n      await this.next();\n    }\n  }\n}\n"],"file":"database-cursor.js"}