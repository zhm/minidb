{"version":3,"sources":["../src/mssql-format.js"],"names":["fmtPattern","ident","literal","string","formatDate","date","replace","isReserved","value","arrayToList","useSpace","array","formatter","sql","temp","i","length","quoteIdent","undefined","Error","Date","toISOString","Buffer","Array","isArray","push","toString","Object","slice","test","quoted","c","quoteLiteral","explicitCast","JSON","stringify","hasBackslash","quoteString","config","cfg","pattern","formatWithArray","fmt","parameters","index","params","re","RegExp","_","type","position","tokens","split","parseInt","format","args","prototype","call","arguments","withArray"],"mappings":"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","sourcesContent":["'use strict';\n\nvar fmtPattern = {\n    ident: 'I',\n    literal: 'L',\n    string: 's',\n};\n\n// convert to Postgres default ISO 8601 format\nfunction formatDate(date) {\n    date = date.replace('T', ' ');\n    date = date.replace('Z', '+00');\n    return date;\n}\n\nfunction isReserved(value) {\n    return false;\n}\n\nfunction arrayToList(useSpace, array, formatter) {\n    var sql = '';\n    var temp = [];\n\n    sql += useSpace ? ' (' : '(';\n    for (var i = 0; i < array.length; i++) {\n      sql += (i === 0 ? '' : ', ') + formatter(array[i]);\n    }\n    sql += ')';\n\n    return sql;\n}\n\n// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\nfunction quoteIdent(value) {\n\n    if (value === undefined || value === null) {\n        throw new Error('SQL identifier cannot be null or undefined');\n    } else if (value === false) {\n        return '\"f\"';\n    } else if (value === true) {\n        return '\"t\"';\n    } else if (value instanceof Date) {\n        return '\"' + formatDate(value.toISOString()) + '\"';\n    } else if (value instanceof Buffer) {\n        throw new Error('SQL identifier cannot be a buffer');\n    } else if (Array.isArray(value) === true) {\n        var temp = [];\n        for (var i = 0; i < value.length; i++) {\n            if (Array.isArray(value[i]) === true) {\n                throw new Error('Nested array to grouped list conversion is not supported for SQL identifier');\n            } else {\n                temp.push(quoteIdent(value[i]));\n            }\n        }\n        return temp.toString();\n    } else if (value === Object(value)) {\n        throw new Error('SQL identifier cannot be an object');\n    }\n\n    var ident = value.toString().slice(0); // create copy\n\n    // do not quote a valid, unquoted identifier\n    if (/^[a-z_][a-z0-9_$]*$/.test(ident) === true && isReserved(ident) === false) {\n        return ident;\n    }\n\n    var quoted = '\"';\n\n    for (var i = 0; i < ident.length; i++) {\n        var c = ident[i];\n        if (c === '\"') {\n            quoted += c + c;\n        } else {\n            quoted += c;\n        }\n    }\n\n    quoted += '\"';\n\n    return quoted;\n};\n\n// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\nfunction quoteLiteral(value) {\n\n    var literal = null;\n    var explicitCast = null;\n\n    if (value === undefined || value === null) {\n        return 'NULL';\n    } else if (value === false) {\n        return \"0\";\n    } else if (value === true) {\n        return \"1\";\n    } else if (value instanceof Date) {\n        return \"'\" + formatDate(value.toISOString()) + \"'\";\n    } else if (value instanceof Buffer) {\n        throw new Error('SQL literal cannot be a buffer');\n    } else if (Array.isArray(value) === true) {\n        var temp = [];\n        for (var i = 0; i < value.length; i++) {\n            if (Array.isArray(value[i]) === true) {\n                temp.push(arrayToList(i !== 0, value[i], quoteLiteral))\n            } else {\n                temp.push(quoteLiteral(value[i]));\n            }\n        }\n        return temp.toString();\n    } else if (value === Object(value)) {\n        literal = JSON.stringify(value);\n    } else {\n        literal = value.toString().slice(0); // create copy\n    }\n\n    var hasBackslash = false;\n    var quoted = '\\'';\n\n    for (var i = 0; i < literal.length; i++) {\n        var c = literal[i];\n        if (c === '\\'') {\n            quoted += c + c;\n        } else if (c === '\\\\') {\n            quoted += c + c;\n            hasBackslash = true;\n        } else {\n            quoted += c;\n        }\n    }\n\n    quoted += '\\'';\n\n    // if (hasBackslash === true) {\n    //     quoted = 'E' + quoted;\n    // }\n\n    // if (explicitCast) {\n    //     quoted += '::' + explicitCast;\n    // }\n\n    return quoted;\n};\n\nfunction quoteString(value) {\n\n    if (value === undefined || value === null) {\n        return '';\n    } else if (value === false) {\n        return '0';\n    } else if (value === true) {\n        return '1';\n    } else if (value instanceof Date) {\n        return formatDate(value.toISOString());\n    } else if (value instanceof Buffer) {\n        return '\\\\x' + value.toString('hex');\n    } else if (Array.isArray(value) === true) {\n        var temp = [];\n        for (var i = 0; i < value.length; i++) {\n            if (value[i] !== null && value[i] !== undefined) {\n                if (Array.isArray(value[i]) === true) {\n                    temp.push(arrayToList(i !== 0, value[i], quoteString));\n                } else {\n                    temp.push(quoteString(value[i]));\n                }\n            }\n        }\n        return temp.toString();\n    } else if (value === Object(value)) {\n        return JSON.stringify(value);\n    }\n\n    return value.toString().slice(0); // return copy\n}\n\nfunction config(cfg) {\n\n    // default\n    fmtPattern.ident = 'I';\n    fmtPattern.literal = 'L';\n    fmtPattern.string = 's';\n\n    if (cfg && cfg.pattern) {\n        if (cfg.pattern.ident) { fmtPattern.ident = cfg.pattern.ident; }\n        if (cfg.pattern.literal) { fmtPattern.literal = cfg.pattern.literal; }\n        if (cfg.pattern.string) { fmtPattern.string = cfg.pattern.string; }\n    }\n}\n\nfunction formatWithArray(fmt, parameters) {\n\n    var index = 0;\n    var params = parameters;\n\n    var re = '%(%|(\\\\d+\\\\$)?[';\n    re += fmtPattern.ident;\n    re += fmtPattern.literal;\n    re += fmtPattern.string;\n    re += '])';\n    re = new RegExp(re, 'g');\n\n    return fmt.replace(re, function(_, type) {\n\n        if (type === '%') {\n            return '%';\n        }\n\n        var position = index;\n        var tokens = type.split('$');\n\n        if (tokens.length > 1) {\n            position = parseInt(tokens[0]) - 1;\n            type = tokens[1];\n        }\n\n        if (position < 0) {\n            throw new Error('specified argument 0 but arguments start at 1');\n        } else if (position > params.length - 1) {\n            throw new Error('too few arguments');\n        }\n\n        index = position + 1;\n\n        if (type === fmtPattern.ident) {\n            return quoteIdent(params[position]);\n        } else if (type === fmtPattern.literal) {\n            return quoteLiteral(params[position]);\n        } else if (type === fmtPattern.string) {\n            return quoteString(params[position]);\n        }\n    });\n}\n\nfunction format(fmt) {\n    var args = Array.prototype.slice.call(arguments);\n    args = args.slice(1); // first argument is fmt\n    return formatWithArray(fmt, args);\n}\n\nformat.config = config;\nformat.ident = quoteIdent;\nformat.literal = quoteLiteral;\nformat.string = quoteString;\nformat.withArray = formatWithArray;\n\nexport default format;\n"],"file":"mssql-format.js"}