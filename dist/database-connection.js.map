{"version":3,"file":"database-connection.js","names":["POOLS","DatabaseConnection","constructor","pool","rawClient","connectionString","connect","options","query","args","close","release","_connect","ConnectionClass","Promise","resolve","reject","db","acquire","err","client","_pool","createPool","poolOptions","params","shutdown","connection","Object","keys","drain","destroyAllNow","exports","default"],"sources":["../src/database-connection.js"],"sourcesContent":["const POOLS = {};\n\n// Wrap a single connection w/ a query method in an async function.\n// This is used when we need to execute multiple successive queries and make sure\n// they're executed on the *same* connection and not separate connections\n// from the connection pool.\nexport default class DatabaseConnection {\n  constructor(pool, rawClient) {\n    this.pool = pool;\n    this.rawClient = rawClient;\n  }\n\n  static pool(connectionString) {\n    // implement\n  }\n\n  static async connect(options) {\n    // implement\n  }\n\n  query(...args) {\n    // return new PostgresCursor(this, this.rawClient.query(...args));\n  }\n\n  close() {\n    this.pool.release(this.rawClient);\n    this.rawClient = null;\n  }\n\n  static async _connect(ConnectionClass, options) {\n    return new Promise((resolve, reject) => {\n      const pool = ConnectionClass.pool(options.db);\n\n      pool.acquire((err, client) => {\n        if (err) {\n          return reject(err);\n        }\n\n        return resolve(new ConnectionClass(pool, client));\n      });\n    });\n  }\n\n  static _pool(createPool, connectionString, poolOptions = {}) {\n    let pool = POOLS[connectionString];\n\n    if (pool == null) {\n      const params = {\n        ...poolOptions,\n        db: connectionString\n      };\n\n      pool = POOLS[connectionString] = createPool(params);\n    }\n\n    return pool;\n  }\n\n  static shutdown() {\n    for (const connection of Object.keys(POOLS)) {\n      const pool = POOLS[connection];\n\n      if (pool) {\n        pool.drain(() => {\n          pool.destroyAllNow();\n        });\n      }\n    }\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAMA,KAAK,GAAG,CAAC,CAAC;;AAEhB;AACA;AACA;AACA;AACe,MAAMC,kBAAkB,CAAC;EACtCC,WAAWA,CAACC,IAAI,EAAEC,SAAS,EAAE;IAC3B,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC5B;EAEA,OAAOD,IAAIA,CAACE,gBAAgB,EAAE;IAC5B;EAAA;EAGF,aAAaC,OAAOA,CAACC,OAAO,EAAE;IAC5B;EAAA;EAGFC,KAAKA,CAAC,GAAGC,IAAI,EAAE;IACb;EAAA;EAGFC,KAAKA,CAAA,EAAG;IACN,IAAI,CAACP,IAAI,CAACQ,OAAO,CAAC,IAAI,CAACP,SAAS,CAAC;IACjC,IAAI,CAACA,SAAS,GAAG,IAAI;EACvB;EAEA,aAAaQ,QAAQA,CAACC,eAAe,EAAEN,OAAO,EAAE;IAC9C,OAAO,IAAIO,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMb,IAAI,GAAGU,eAAe,CAACV,IAAI,CAACI,OAAO,CAACU,EAAE,CAAC;MAE7Cd,IAAI,CAACe,OAAO,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAK;QAC5B,IAAID,GAAG,EAAE;UACP,OAAOH,MAAM,CAACG,GAAG,CAAC;QACpB;QAEA,OAAOJ,OAAO,CAAC,IAAIF,eAAe,CAACV,IAAI,EAAEiB,MAAM,CAAC,CAAC;MACnD,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,OAAOC,KAAKA,CAACC,UAAU,EAAEjB,gBAAgB,EAAEkB,WAAW,GAAG,CAAC,CAAC,EAAE;IAC3D,IAAIpB,IAAI,GAAGH,KAAK,CAACK,gBAAgB,CAAC;IAElC,IAAIF,IAAI,IAAI,IAAI,EAAE;MAChB,MAAMqB,MAAM,GAAG;QACb,GAAGD,WAAW;QACdN,EAAE,EAAEZ;MACN,CAAC;MAEDF,IAAI,GAAGH,KAAK,CAACK,gBAAgB,CAAC,GAAGiB,UAAU,CAACE,MAAM,CAAC;IACrD;IAEA,OAAOrB,IAAI;EACb;EAEA,OAAOsB,QAAQA,CAAA,EAAG;IAChB,KAAK,MAAMC,UAAU,IAAIC,MAAM,CAACC,IAAI,CAAC5B,KAAK,CAAC,EAAE;MAC3C,MAAMG,IAAI,GAAGH,KAAK,CAAC0B,UAAU,CAAC;MAE9B,IAAIvB,IAAI,EAAE;QACRA,IAAI,CAAC0B,KAAK,CAAC,MAAM;UACf1B,IAAI,CAAC2B,aAAa,CAAC,CAAC;QACtB,CAAC,CAAC;MACJ;IACF;EACF;AACF;AAACC,OAAA,CAAAC,OAAA,GAAA/B,kBAAA","ignoreList":[]}