{"version":3,"sources":["../src/database-connection.js"],"names":["POOLS","DatabaseConnection","constructor","pool","rawClient","connectionString","connect","options","query","args","close","release","_connect","ConnectionClass","Promise","resolve","reject","db","acquire","err","client","_pool","createPool","poolOptions","params","shutdown","connection","Object","keys","drain","destroyAllNow"],"mappings":";;;;;;AAAA,MAAMA,KAAK,GAAG,EAAd,C,CAEA;AACA;AACA;AACA;;AACe,MAAMC,kBAAN,CAAyB;AACtCC,EAAAA,WAAW,CAACC,IAAD,EAAOC,SAAP,EAAkB;AAC3B,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACD;;AAEU,SAAJD,IAAI,CAACE,gBAAD,EAAmB,CAC5B;AACD;;AAEmB,eAAPC,OAAO,CAACC,OAAD,EAAU,CAC5B;AACD;;AAEDC,EAAAA,KAAK,CAAC,GAAGC,IAAJ,EAAU,CACb;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN,SAAKP,IAAL,CAAUQ,OAAV,CAAkB,KAAKP,SAAvB;AACA,SAAKA,SAAL,GAAiB,IAAjB;AACD;;AAEoB,eAARQ,QAAQ,CAACC,eAAD,EAAkBN,OAAlB,EAA2B;AAC9C,WAAO,IAAIO,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMb,IAAI,GAAGU,eAAe,CAACV,IAAhB,CAAqBI,OAAO,CAACU,EAA7B,CAAb;AAEAd,MAAAA,IAAI,CAACe,OAAL,CAAa,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAC5B,YAAID,GAAJ,EAAS;AACP,iBAAOH,MAAM,CAACG,GAAD,CAAb;AACD;;AAED,eAAOJ,OAAO,CAAC,IAAIF,eAAJ,CAAoBV,IAApB,EAA0BiB,MAA1B,CAAD,CAAd;AACD,OAND;AAOD,KAVM,CAAP;AAWD;;AAEW,SAALC,KAAK,CAACC,UAAD,EAAajB,gBAAb,EAA+BkB,WAAW,GAAG,EAA7C,EAAiD;AAC3D,QAAIpB,IAAI,GAAGH,KAAK,CAACK,gBAAD,CAAhB;;AAEA,QAAIF,IAAI,IAAI,IAAZ,EAAkB;AAChB,YAAMqB,MAAM,GAAG,EACb,GAAGD,WADU;AAEbN,QAAAA,EAAE,EAAEZ;AAFS,OAAf;AAKAF,MAAAA,IAAI,GAAGH,KAAK,CAACK,gBAAD,CAAL,GAA0BiB,UAAU,CAACE,MAAD,CAA3C;AACD;;AAED,WAAOrB,IAAP;AACD;;AAEc,SAARsB,QAAQ,GAAG;AAChB,SAAK,MAAMC,UAAX,IAAyBC,MAAM,CAACC,IAAP,CAAY5B,KAAZ,CAAzB,EAA6C;AAC3C,YAAMG,IAAI,GAAGH,KAAK,CAAC0B,UAAD,CAAlB;;AAEA,UAAIvB,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAAC0B,KAAL,CAAW,MAAM;AACf1B,UAAAA,IAAI,CAAC2B,aAAL;AACD,SAFD;AAGD;AACF;AACF;;AA9DqC","sourcesContent":["const POOLS = {};\n\n// Wrap a single connection w/ a query method in an async function.\n// This is used when we need to execute multiple successive queries and make sure\n// they're executed on the *same* connection and not separate connections\n// from the connection pool.\nexport default class DatabaseConnection {\n  constructor(pool, rawClient) {\n    this.pool = pool;\n    this.rawClient = rawClient;\n  }\n\n  static pool(connectionString) {\n    // implement\n  }\n\n  static async connect(options) {\n    // implement\n  }\n\n  query(...args) {\n    // return new PostgresCursor(this, this.rawClient.query(...args));\n  }\n\n  close() {\n    this.pool.release(this.rawClient);\n    this.rawClient = null;\n  }\n\n  static async _connect(ConnectionClass, options) {\n    return new Promise((resolve, reject) => {\n      const pool = ConnectionClass.pool(options.db);\n\n      pool.acquire((err, client) => {\n        if (err) {\n          return reject(err);\n        }\n\n        return resolve(new ConnectionClass(pool, client));\n      });\n    });\n  }\n\n  static _pool(createPool, connectionString, poolOptions = {}) {\n    let pool = POOLS[connectionString];\n\n    if (pool == null) {\n      const params = {\n        ...poolOptions,\n        db: connectionString\n      };\n\n      pool = POOLS[connectionString] = createPool(params);\n    }\n\n    return pool;\n  }\n\n  static shutdown() {\n    for (const connection of Object.keys(POOLS)) {\n      const pool = POOLS[connection];\n\n      if (pool) {\n        pool.drain(() => {\n          pool.destroyAllNow();\n        });\n      }\n    }\n  }\n}\n"],"file":"database-connection.js"}