{"version":3,"file":"sqlite.js","names":["_pgFormat","_interopRequireDefault","require","_util","_esc","_database","_databaseCursor","_minisqlite","e","__esModule","default","quoteLiteral","value","stringValue","Date","getTime","toString","Number","isFinite","JSON","stringify","result","indexOf","length","i","char","SQLite","Database","open","file","flags","Promise","resolve","reject","database","SQLiteDatabase","err","db","lastError","setup","options","wal","execute","autoVacuum","synchronous","toUpperCase","ident","esc","dialect","_each","sql","params","callback","log","cursor","query","hasRows","next","columns","values","index","ex","verbose","console","error","_lastInsertID","lastInsertID","close","_execute","resultColumns","rows","push","args","DatabaseCursor","transaction","block","beginTransaction","commit","rollback","rollbackError","arrayFormatString","array","isInteger","buildWhere","where","clause","key","Object","keys","columnName","pgformat","Array","isArray","buildInsert","attributes","includeNames","names","placeholders","raw","buildUpdate","sets","insertStatement","table","returning","format","join","insertStatements","arrayOfAttributes","arrayOfValues","insert","statement","all","toDatabase","column","type","fromDatabase","exports"],"sources":["../src/sqlite.js"],"sourcesContent":["import pgformat from 'pg-format';\nimport { format } from 'util';\nimport esc from './esc';\nimport Database from './database';\nimport DatabaseCursor from './database-cursor';\nimport { Database as SQLiteDatabase } from 'minisqlite';\n\nfunction quoteLiteral(value) {\n  let stringValue = null;\n\n  if (value == null) {\n    return 'NULL';\n  } else if (value === false) {\n    return '0';\n  } else if (value === true) {\n    return '1';\n  } else if (value instanceof Date) {\n    return value.getTime().toString();\n  } else if (typeof value === 'number') {\n    return Number.isFinite(value) ? value.toString() : 'NULL';\n  } else if (typeof value === 'string') {\n    stringValue = value;\n  } else {\n    stringValue = JSON.stringify(value);\n  }\n\n  let result = \"'\";\n\n  if (stringValue.indexOf(\"'\") !== -1) {\n    const length = stringValue.length;\n\n    for (let i = 0; i < length; i++) {\n      const char = stringValue[i];\n\n      if (char === \"'\") {\n        result += \"'\";\n      }\n\n      result += char;\n    }\n  } else {\n    result += stringValue;\n  }\n\n  result += \"'\";\n\n  return result;\n}\n\nexport default class SQLite extends Database {\n  async open({file, flags}) {\n    return new Promise((resolve, reject) => {\n      const database = new SQLiteDatabase();\n\n      database.open(file, flags, null, (err, db) => {\n        if (err) {\n          return reject(db ? db.lastError : err);\n        }\n\n        return resolve(db);\n      });\n    });\n  }\n\n  async setup() {\n    if (!this.database) {\n      this.database = await this.open(this.options);\n    }\n\n    if (this.options.wal) {\n      await this.execute('PRAGMA journal_mode=WAL');\n    }\n\n    if (this.options.autoVacuum) {\n      await this.execute('PRAGMA auto_vacuum=INCREMENTAL');\n    }\n\n    if (this.options.synchronous) {\n      await this.execute('PRAGMA synchronous=' + this.options.synchronous.toUpperCase());\n    }\n  }\n\n  ident(value) {\n    return esc(value, '\"');\n  }\n\n  static async open(options) {\n    const db = new SQLite(options);\n    await db.setup();\n    return db;\n  }\n\n  get dialect() {\n    return 'sqlite';\n  }\n\n  async _each(sql, params, callback) {\n    this.log(sql);\n\n    const database = this.database;\n    let cursor = null;\n\n    try {\n      cursor = this.query(sql);\n\n      while (cursor.hasRows) {\n        const result = await cursor.next();\n\n        if (result && callback) {\n          /* eslint-disable callback-return */\n          await callback({columns: result.columns, values: result.values, index: result.index, cursor});\n          /* eslint-enable callback-return */\n        }\n      }\n    } catch (ex) {\n      if (this.verbose) {\n        console.error('ERROR', ex);\n      }\n\n      throw ex;\n    } finally {\n      this._lastInsertID = database.lastInsertID;\n\n      if (cursor) {\n        try {\n          await cursor.close();\n        } catch (err) {\n          // Closing the cursor on a connection where there was a previous error rethrows the same error\n          // This is because pumping the cursor to completion ends up carrying the original error to\n          // the end. This is desired behavior, we just have to swallow any potential errors here.\n        }\n      }\n    }\n  }\n\n  async close() {\n    if (this.database) {\n      await this.database.close();\n      this.database = null;\n    }\n  }\n\n  async _execute(sql, params) {\n    let resultColumns = null;\n    const rows = [];\n\n    await this._each(sql, [], async ({columns, values, index}) => {\n      if (resultColumns == null) {\n        resultColumns = columns;\n      }\n\n      if (values) {\n        rows.push(values);\n      }\n    });\n\n    return { rows: rows, columns: resultColumns };\n  }\n\n  query(...args) {\n    return new DatabaseCursor(this, this.database.query(...args));\n  }\n\n  async transaction(block) {\n    await this.beginTransaction();\n\n    try {\n      await block(this);\n      await this.commit();\n    } catch (ex) {\n      try {\n        await this.rollback();\n      } catch (rollbackError) {\n        // await this.close();\n        throw rollbackError;\n      }\n\n      throw ex;\n    } finally {\n      // await this.close();\n    }\n  }\n\n  arrayFormatString(array) {\n    if (Number.isInteger(array[0])) {\n      return 'ARRAY[%L]::bigint[]';\n    } else if (typeof array[0] === 'number') {\n      return 'ARRAY[%L]::double precision[]';\n    }\n\n    return 'ARRAY[%L]';\n  }\n\n  buildWhere(where) {\n    const clause = [];\n\n    if (where) {\n      for (const key of Object.keys(where)) {\n        const value = where[key];\n        const columnName = '`' + key + '`';\n\n        if (value == null) {\n          clause.push(pgformat('%s IS NULL', columnName));\n        } else if (Array.isArray(value)) {\n          clause.push(pgformat('%s = ANY (' + this.arrayFormatString(where[key]) + ')', columnName, value));\n        } else {\n          clause.push(pgformat('%s = %s', columnName, quoteLiteral(where[key])));\n        }\n      }\n    }\n\n    return [ clause, [] ];\n  }\n\n  buildInsert(attributes, includeNames = true) {\n    const names = [];\n    const values = [];\n    const placeholders = [];\n\n    // Use the literal values instead of placeholders  because parameterized\n    // queries require prepared statements. Prepared statements are stateful\n    // and impose requirements on the connection that are incompatible with\n    // pgbouncer.\n    for (const key of Object.keys(attributes)) {\n      if (includeNames) {\n        names.push('`' + key + '`');\n      }\n\n      const value = attributes[key];\n\n      if (value && value.raw) {\n        placeholders.push(pgformat('%s', value.raw));\n      } else {\n        placeholders.push(quoteLiteral(value));\n      }\n    }\n\n    return [ names, placeholders, values ];\n  }\n\n  buildUpdate(attributes) {\n    const sets = [];\n    const values = [];\n\n    for (const key of Object.keys(attributes)) {\n      const value = attributes[key];\n\n      if (value && value.raw) {\n        sets.push(pgformat('%s = %s', '`' + key + '`', value.raw));\n      } else {\n        sets.push(pgformat('%s = %s', '`' + key + '`', quoteLiteral(value)));\n      }\n    }\n\n    return [ sets, values ];\n  }\n\n  insertStatement(table, attributes, options) {\n    // if (options == null) {\n    //   throw new Error('options not given');\n    // }\n\n    const [ names, placeholders, values ] = this.buildInsert(attributes);\n\n    const returning = '';\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES (%s)%s;',\n                       table,\n                       names.join(', '),\n                       placeholders.join(', '),\n                       returning);\n\n    return {sql, values};\n  }\n\n  insertStatements(table, arrayOfAttributes, options) {\n    const arrayOfValues = [];\n\n    let names = null;\n\n    for (const attributes of arrayOfAttributes) {\n      const insert = this.buildInsert(attributes, names == null);\n\n      if (names == null) {\n        names = insert[0];\n      }\n\n      arrayOfValues.push('(' + insert[1].join(', ') + ')');\n    }\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES %s;',\n                       table,\n                       names.join(', '),\n                       arrayOfValues.join(',\\n'));\n\n    return {sql, values: {}};\n  }\n\n  async insert(table, attributes, options) {\n    const statement = this.insertStatement(table, attributes, options);\n\n    const result = await this.all(statement.sql, statement.values);\n\n    // TODO(zhm) broken\n    return this._lastInsertID;\n    // return +result[0].id;\n  }\n\n  toDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return value.getTime();\n\n      default:\n        return super.toDatabase(value, column);\n    }\n  }\n\n  fromDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return new Date(+value);\n\n      default:\n        return super.fromDatabase(value, column);\n    }\n  }\n}\n\n"],"mappings":"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","ignoreList":[]}