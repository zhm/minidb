{"version":3,"sources":["../src/sqlite.js"],"names":["quoteLiteral","value","stringValue","Date","getTime","toString","Number","isFinite","JSON","stringify","result","indexOf","length","i","char","SQLite","Database","open","file","flags","Promise","resolve","reject","database","SQLiteDatabase","err","db","lastError","setup","options","wal","execute","autoVacuum","synchronous","toUpperCase","ident","dialect","_each","sql","params","callback","log","cursor","query","hasRows","next","columns","values","index","ex","verbose","console","error","_lastInsertID","lastInsertID","close","_execute","resultColumns","rows","push","args","DatabaseCursor","transaction","block","beginTransaction","commit","rollback","rollbackError","arrayFormatString","array","isInteger","buildWhere","where","clause","key","Object","keys","columnName","Array","isArray","buildInsert","attributes","includeNames","names","placeholders","raw","buildUpdate","sets","insertStatement","table","returning","join","insertStatements","arrayOfAttributes","arrayOfValues","insert","statement","all","toDatabase","column","type","fromDatabase"],"mappings":"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","sourcesContent":["import pgformat from 'pg-format';\nimport { format } from 'util';\nimport esc from './esc';\nimport Database from './database';\nimport DatabaseCursor from './database-cursor';\nimport { Database as SQLiteDatabase } from 'minisqlite';\n\nfunction quoteLiteral(value) {\n  let stringValue = null;\n\n  if (value == null) {\n    return 'NULL';\n  } else if (value === false) {\n    return '0';\n  } else if (value === true) {\n    return '1';\n  } else if (value instanceof Date) {\n    return value.getTime().toString();\n  } else if (typeof value === 'number') {\n    return Number.isFinite(value) ? value.toString() : 'NULL';\n  } else if (typeof value === 'string') {\n    stringValue = value;\n  } else {\n    stringValue = JSON.stringify(value);\n  }\n\n  let result = \"'\";\n\n  if (stringValue.indexOf(\"'\") !== -1) {\n    const length = stringValue.length;\n\n    for (let i = 0; i < length; i++) {\n      const char = stringValue[i];\n\n      if (char === \"'\") {\n        result += \"'\";\n      }\n\n      result += char;\n    }\n  } else {\n    result += stringValue;\n  }\n\n  result += \"'\";\n\n  return result;\n}\n\nexport default class SQLite extends Database {\n  async open({file, flags}) {\n    return new Promise((resolve, reject) => {\n      const database = new SQLiteDatabase();\n\n      database.open(file, flags, null, (err, db) => {\n        if (err) {\n          return reject(db ? db.lastError : err);\n        }\n\n        return resolve(db);\n      });\n    });\n  }\n\n  async setup() {\n    if (!this.database) {\n      this.database = await this.open(this.options);\n    }\n\n    if (this.options.wal) {\n      await this.execute('PRAGMA journal_mode=WAL');\n    }\n\n    if (this.options.autoVacuum) {\n      await this.execute('PRAGMA auto_vacuum=INCREMENTAL');\n    }\n\n    if (this.options.synchronous) {\n      await this.execute('PRAGMA synchronous=' + this.options.synchronous.toUpperCase());\n    }\n  }\n\n  ident(value) {\n    return esc(value, '\"');\n  }\n\n  static async open(options) {\n    const db = new SQLite(options);\n    await db.setup();\n    return db;\n  }\n\n  get dialect() {\n    return 'sqlite';\n  }\n\n  async _each(sql, params, callback) {\n    this.log(sql);\n\n    const database = this.database;\n    let cursor = null;\n\n    try {\n      cursor = this.query(sql);\n\n      while (cursor.hasRows) {\n        const result = await cursor.next();\n\n        if (result && callback) {\n          /* eslint-disable callback-return */\n          await callback({columns: result.columns, values: result.values, index: result.index, cursor});\n          /* eslint-enable callback-return */\n        }\n      }\n    } catch (ex) {\n      if (this.verbose) {\n        console.error('ERROR', ex);\n      }\n\n      throw ex;\n    } finally {\n      this._lastInsertID = database.lastInsertID;\n\n      if (cursor) {\n        try {\n          await cursor.close();\n        } catch (err) {\n          // Closing the cursor on a connection where there was a previous error rethrows the same error\n          // This is because pumping the cursor to completion ends up carrying the original error to\n          // the end. This is desired behavior, we just have to swallow any potential errors here.\n        }\n      }\n    }\n  }\n\n  async close() {\n    if (this.database) {\n      await this.database.close();\n      this.database = null;\n    }\n  }\n\n  async _execute(sql, params) {\n    let resultColumns = null;\n    const rows = [];\n\n    await this._each(sql, [], async ({columns, values, index}) => {\n      if (resultColumns == null) {\n        resultColumns = columns;\n      }\n\n      if (values) {\n        rows.push(values);\n      }\n    });\n\n    return { rows: rows, columns: resultColumns };\n  }\n\n  query(...args) {\n    return new DatabaseCursor(this, this.database.query(...args));\n  }\n\n  async transaction(block) {\n    await this.beginTransaction();\n\n    try {\n      await block(this);\n      await this.commit();\n    } catch (ex) {\n      try {\n        await this.rollback();\n      } catch (rollbackError) {\n        // await this.close();\n        throw rollbackError;\n      }\n\n      throw ex;\n    } finally {\n      // await this.close();\n    }\n  }\n\n  arrayFormatString(array) {\n    if (Number.isInteger(array[0])) {\n      return 'ARRAY[%L]::bigint[]';\n    } else if (typeof array[0] === 'number') {\n      return 'ARRAY[%L]::double precision[]';\n    }\n\n    return 'ARRAY[%L]';\n  }\n\n  buildWhere(where) {\n    const clause = [];\n\n    if (where) {\n      for (const key of Object.keys(where)) {\n        const value = where[key];\n        const columnName = '`' + key + '`';\n\n        if (value == null) {\n          clause.push(pgformat('%s IS NULL', columnName));\n        } else if (Array.isArray(value)) {\n          clause.push(pgformat('%s = ANY (' + this.arrayFormatString(where[key]) + ')', columnName, value));\n        } else {\n          clause.push(pgformat('%s = %s', columnName, quoteLiteral(where[key])));\n        }\n      }\n    }\n\n    return [ clause, [] ];\n  }\n\n  buildInsert(attributes, includeNames = true) {\n    const names = [];\n    const values = [];\n    const placeholders = [];\n\n    // Use the literal values instead of placeholders  because parameterized\n    // queries require prepared statements. Prepared statements are stateful\n    // and impose requirements on the connection that are incompatible with\n    // pgbouncer.\n    for (const key of Object.keys(attributes)) {\n      if (includeNames) {\n        names.push('`' + key + '`');\n      }\n\n      const value = attributes[key];\n\n      if (value && value.raw) {\n        placeholders.push(pgformat('%s', value.raw));\n      } else {\n        placeholders.push(quoteLiteral(value));\n      }\n    }\n\n    return [ names, placeholders, values ];\n  }\n\n  buildUpdate(attributes) {\n    const sets = [];\n    const values = [];\n\n    for (const key of Object.keys(attributes)) {\n      const value = attributes[key];\n\n      if (value && value.raw) {\n        sets.push(pgformat('%s = %s', '`' + key + '`', value.raw));\n      } else {\n        sets.push(pgformat('%s = %s', '`' + key + '`', quoteLiteral(value)));\n      }\n    }\n\n    return [ sets, values ];\n  }\n\n  insertStatement(table, attributes, options) {\n    // if (options == null) {\n    //   throw new Error('options not given');\n    // }\n\n    const [ names, placeholders, values ] = this.buildInsert(attributes);\n\n    const returning = '';\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES (%s)%s;',\n                       table,\n                       names.join(', '),\n                       placeholders.join(', '),\n                       returning);\n\n    return {sql, values};\n  }\n\n  insertStatements(table, arrayOfAttributes, options) {\n    const arrayOfValues = [];\n\n    let names = null;\n\n    for (const attributes of arrayOfAttributes) {\n      const insert = this.buildInsert(attributes, names == null);\n\n      if (names == null) {\n        names = insert[0];\n      }\n\n      arrayOfValues.push('(' + insert[1].join(', ') + ')');\n    }\n\n    const sql = format('INSERT INTO %s (%s)\\nVALUES %s;',\n                       table,\n                       names.join(', '),\n                       arrayOfValues.join(',\\n'));\n\n    return {sql, values: {}};\n  }\n\n  async insert(table, attributes, options) {\n    const statement = this.insertStatement(table, attributes, options);\n\n    const result = await this.all(statement.sql, statement.values);\n\n    // TODO(zhm) broken\n    return this._lastInsertID;\n    // return +result[0].id;\n  }\n\n  toDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return value.getTime();\n\n      default:\n        return super.toDatabase(value, column);\n    }\n  }\n\n  fromDatabase(value, column) {\n    if (value == null) {\n      return null;\n    }\n\n    switch (column.type) {\n      case 'datetime':\n        return new Date(+value);\n\n      default:\n        return super.fromDatabase(value, column);\n    }\n  }\n}\n\n"],"file":"sqlite.js"}